server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api
  ssl:
    enabled: ${SSL_ENABLED:false}
    key-store: ${SSL_KEYSTORE:}
    key-store-password: ${SSL_KEYSTORE_PASSWORD:}
    key-store-type: ${SSL_KEYSTORE_TYPE:PKCS12}

spring:
  profiles:
    active: prod
    
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      connection-timeout: 30000
      maximum-pool-size: ${DB_POOL_SIZE:50}
      minimum-idle: ${DB_MIN_IDLE:10}
      idle-timeout: 600000
      max-lifetime: 1800000
      
  jpa:
    hibernate:
      ddl-auto: validate  # Never use update/create in production
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: false
        use_sql_comments: false
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
        
  redis:
    host: ${REDIS_HOST}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD}
    database: ${REDIS_DB:0}
    timeout: 10000ms
    lettuce:
      pool:
        max-active: 20
        max-idle: 10
        min-idle: 5
        max-wait: -1ms
        
  mail:
    host: ${MAIL_HOST}
    port: ${MAIL_PORT:25}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          ssl:
            trust: ${MAIL_SSL_TRUST:}
            
  servlet:
    multipart:
      max-file-size: ${MAX_FILE_SIZE:25MB}
      max-request-size: ${MAX_REQUEST_SIZE:30MB}
      
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: ${TIMEZONE:GMT+8}
    
  cache:
    type: redis
    redis:
      time-to-live: 3600000
      cache-null-values: false
      
# JWT Configuration
jwt:
  secret: ${JWT_SECRET}  # MUST be provided via environment variable
  expiration: ${JWT_EXPIRATION:86400000}
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}
  
# Mail Server Configuration
mail-server:
  smtp:
    enabled: ${SMTP_ENABLED:true}
    port: ${SMTP_PORT:25}
    secure-port: ${SMTP_SSL_PORT:465}
    max-connections: ${SMTP_MAX_CONN:200}
    auth-required: true
    tls-enabled: true
    
  imap:
    enabled: ${IMAP_ENABLED:true}
    port: ${IMAP_PORT:143}
    secure-port: ${IMAP_SSL_PORT:993}
    max-connections: ${IMAP_MAX_CONN:100}
    
  pop3:
    enabled: ${POP3_ENABLED:true}
    port: ${POP3_PORT:110}
    secure-port: ${POP3_SSL_PORT:995}
    max-connections: ${POP3_MAX_CONN:50}
    
  domain:
    default: ${MAIL_DOMAIN}
    allowed-domains: ${ALLOWED_DOMAINS}
      
  storage:
    path: ${MAIL_STORAGE_PATH:/var/mail/storage}
    max-mailbox-size: ${MAX_MAILBOX_SIZE:1073741824}
    max-message-size: ${MAX_MESSAGE_SIZE:26214400}
    
  security:
    dkim-enabled: ${DKIM_ENABLED:true}
    spf-enabled: ${SPF_ENABLED:true}
    dmarc-enabled: ${DMARC_ENABLED:true}
    spam-filter-enabled: ${SPAM_FILTER_ENABLED:true}
    virus-scan-enabled: ${VIRUS_SCAN_ENABLED:false}
    rate-limit-enabled: true
    max-requests-per-minute: ${RATE_LIMIT:60}
    
# Logging Configuration
logging:
  level:
    root: WARN
    com.enterprise.mail: INFO
    org.springframework.web: WARN
    org.springframework.security: WARN
    org.hibernate: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: ${LOG_PATH:/var/log}/mail-system.log
    max-size: 50MB
    max-history: 90
    total-size-cap: 5GB
    
# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true
        
# API Documentation
springdoc:
  api-docs:
    enabled: ${API_DOCS_ENABLED:false}
    path: /v3/api-docs
  swagger-ui:
    enabled: ${SWAGGER_ENABLED:false}
    path: /swagger-ui.html
    
# CORS Configuration
cors:
  allowed-origins: ${CORS_ORIGINS}
  allowed-methods:
    - GET
    - POST
    - PUT
    - DELETE
    - OPTIONS
  allowed-headers:
    - Authorization
    - Content-Type
    - X-Requested-With
  exposed-headers:
    - Authorization
    - Content-Type
  allow-credentials: true
  max-age: 3600

# Security Configuration
security:
  require-https: ${REQUIRE_HTTPS:true}
  session-timeout: ${SESSION_TIMEOUT:1800}
  max-login-attempts: ${MAX_LOGIN_ATTEMPTS:5}
  lockout-duration: ${LOCKOUT_DURATION:900}